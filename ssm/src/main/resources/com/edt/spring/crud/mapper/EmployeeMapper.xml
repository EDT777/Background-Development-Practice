<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.edt.spring.crud.mapper.EmployeeMapper">
    <resultMap id="BaseResultMap" type="com.edt.spring.crud.domain.Employee">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="age" property="age" jdbcType="INTEGER"/>
        <result column="admin" property="admin" jdbcType="BIT"/>

        <result column="dept_id" property="dept.id"/>
        <result column="d_id" property="dept.id"/>
        <result column="d_name" property="dept.name"/>
        <result column="d_sn" property="dept.sn"/>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from employee
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert" parameterType="com.edt.spring.crud.domain.Employee" useGeneratedKeys="true" keyProperty="id">
        insert into employee (name, password, email,
                              age, admin, dept_id)
        values (#{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
                #{age,jdbcType=INTEGER}, #{admin,jdbcType=BIT}, #{dept.id,jdbcType=BIGINT})
    </insert>
    <update id="updateByPrimaryKey" parameterType="com.edt.spring.crud.domain.Employee">
        update employee
        set name     = #{name,jdbcType=VARCHAR},
            email    = #{email,jdbcType=VARCHAR},
            age      = #{age,jdbcType=INTEGER},
            admin    = #{admin,jdbcType=BIT},
            dept_id  = #{dept.id,jdbcType=BIGINT}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select id, name, password, email, age, admin, dept_id
        from employee
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectAll" resultMap="BaseResultMap">
        select id, name, password, email, age, admin, dept_id
        from employee
    </select>

    <sql id="where_sql">
        <where>
            <if test="keyword != null and keyword != ''">
                and (e.name like concat('%',#{keyword},'%') or e.email like concat('%',#{keyword},'%'))
            </if>
            <if test="deptId !=null">
                and e.dept_id = #{deptId}
            </if>
        </where>
    </sql>
    <select id="selectForCount" resultType="java.lang.Integer">
        select count(*) from employee e
        <include refid="where_sql"/>
    </select>
    <select id="selectForList" resultMap="BaseResultMap">
        select e.id,e.name,e.password,e.email,e.age,e.admin,e.dept_id,d.id as d_id,d.name as d_name,d.sn as d_sn
        from employee e join department2 d on e.dept_id = d.id
        <include refid="where_sql"/>
    limit #{start},#{pageSize}
    </select>
</mapper>